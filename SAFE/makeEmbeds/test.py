# Copyright (c) Facebook, Inc. and its affiliates.
# All rights reserved.
#
# This source code is licensed under the license found in the
# LICENSE file in the root directory of this source tree.
#

from utils.function_normalizer import FunctionNormalizer
from utils.instructions_converter import InstructionsConverter
from utils.capstone_disassembler import disassemble
from safetorch.safe_network import SAFE
from safetorch.parameters import Config
import torch

# initialize SAFE
config = Config()
safe = SAFE(config)



# load instruction converter and normalizer
I2V_FILENAME = "model/word2id.json"
converter = InstructionsConverter(I2V_FILENAME)
normalizer = FunctionNormalizer(max_instruction=150)



# load SAFE weights
SAFE_torch_model_path = "model/SAFEtorch.pt"
state_dict = torch.load(SAFE_torch_model_path)
safe.load_state_dict(state_dict)
safe = safe.eval()

asm = "554889e5534881ec980000004889bd68ffffff4889b560ffffff488b8568ffffffc6808800000001488b8560ffffff4889c7e82bbf0000488945d048c745e80000000048c745e00000000048c745d800000000488d8570ffffff488b55d04889d64889c7e80dfcffff488d8570ffffff4889c7e8e67cfdff4889c2488b8568ffffff48895018488d8570ffffff4889c7e82d6bfdff488b8568ffffff488b40184889c7e8feaed6ff488945e8488b8568ffffff488b5818488d4580488b55d04889d64889c7e8acfbffff488b75e8488d4580b9000000004889da4889c7e8f49cfdff488d45804889c7e8d46afdff488b8568ffffff488b55e848895010488b8568ffffff488b40184885c0742b488b8568ffffff488b40100fb60084c07e19488b8568ffffff488b40100fb6003c7f7407b801000000eb05b800000000488b9568ffffff884220488d4590488b55d04889d64889c7e850fbffff488d45904889c7e8f87bfdff4889c2488b8568ffffff48895030488d45904889c7e8426afdff488b8568ffffff488b40304889c7e813aed6ff488945e0488b8568ffffff488b5830488d45a0488b55d04889d64889c7e8f5faffff488b75e0488d45a0b9000000004889da4889c7e8099cfdff488d45a04889c7e8e969fdff488b8568ffffff488b55e048895028488d45b0488b55d04889d64889c7e8e3faffff488d45b04889c7e8577bfdff4889c2488b8568ffffff48895040488d45b04889c7e8a169fdff488b8568ffffff488b40404889c7e872add6ff488945d8488b8568ffffff488b5840488d45c0488b55d04889d64889c7e888faffff488b75d8488d45c0b9000000004889da4889c7e8689bfdff488d45c04889c7e84869fdff488b8568ffffff488b55d848895038488b45d04889c7e895f9ffff89c2488b8568ffffff885048488b45d04889c7e8a3f9ffff89c2488b8568ffffff885049488b8560ffffff4889c7e8c0ba0000488945c8488b8568ffffff488d484a488b0590bb3200488b00488d5024488b0582bb3200488b30488b45c84889c7e88faeffff488b8568ffffff488d486e488b05994f3200488b00488d501a488b058b4f3200488b30488b45c84889c7e860aeffffe9d40000004889c3488d8570ffffff4889c7e88168fdff4889d8eb774889c3488d45804889c7e86d68fdff4889d8eb634889c3488d45904889c7e85968fdff4889d8eb4f4889c3488d45a04889c7e84568fdff4889d8eb3b4889c3488d45b04889c7e83168fdff4889d8eb274889c3488d45c04889c7e81d68fdff4889d8eb134889c3e858d5fbff4889d84889c7e8b93dccff4889c7e865d4fbff48837de800740c488b45e84889c7e82eacd6ff48837de000740c488b45e04889c7e81bacd6ff48837dd800740c488b45d84889c7e808acd6ffe833cffbff4881c4980000005b5dc3"
arch = "x86"
bits = 64
instructions = disassemble(asm, arch, bits)

converted_instructions = converter.convert_to_ids(instructions)
functions, length = normalizer.normalize_functions([converted_instructions])
tensor = torch.LongTensor(functions[0])
function_embedding = safe(tensor, length)

print(function_embedding.shape)